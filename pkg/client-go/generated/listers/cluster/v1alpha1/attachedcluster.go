/*
Copyright 2022-2025 Kurator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kurator.dev/kurator/pkg/apis/cluster/v1alpha1"
)

// AttachedClusterLister helps list AttachedClusters.
// All objects returned here must be treated as read-only.
type AttachedClusterLister interface {
	// List lists all AttachedClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AttachedCluster, err error)
	// AttachedClusters returns an object that can list and get AttachedClusters.
	AttachedClusters(namespace string) AttachedClusterNamespaceLister
	AttachedClusterListerExpansion
}

// attachedClusterLister implements the AttachedClusterLister interface.
type attachedClusterLister struct {
	indexer cache.Indexer
}

// NewAttachedClusterLister returns a new AttachedClusterLister.
func NewAttachedClusterLister(indexer cache.Indexer) AttachedClusterLister {
	return &attachedClusterLister{indexer: indexer}
}

// List lists all AttachedClusters in the indexer.
func (s *attachedClusterLister) List(selector labels.Selector) (ret []*v1alpha1.AttachedCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AttachedCluster))
	})
	return ret, err
}

// AttachedClusters returns an object that can list and get AttachedClusters.
func (s *attachedClusterLister) AttachedClusters(namespace string) AttachedClusterNamespaceLister {
	return attachedClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AttachedClusterNamespaceLister helps list and get AttachedClusters.
// All objects returned here must be treated as read-only.
type AttachedClusterNamespaceLister interface {
	// List lists all AttachedClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AttachedCluster, err error)
	// Get retrieves the AttachedCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AttachedCluster, error)
	AttachedClusterNamespaceListerExpansion
}

// attachedClusterNamespaceLister implements the AttachedClusterNamespaceLister
// interface.
type attachedClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AttachedClusters in the indexer for a given namespace.
func (s attachedClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AttachedCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AttachedCluster))
	})
	return ret, err
}

// Get retrieves the AttachedCluster from the indexer for a given namespace and name.
func (s attachedClusterNamespaceLister) Get(name string) (*v1alpha1.AttachedCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("attachedcluster"), name)
	}
	return obj.(*v1alpha1.AttachedCluster), nil
}
