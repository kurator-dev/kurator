/*
Copyright 2022-2025 Kurator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kurator.dev/kurator/pkg/apis/infra/v1alpha1"
)

// CustomMachineLister helps list CustomMachines.
// All objects returned here must be treated as read-only.
type CustomMachineLister interface {
	// List lists all CustomMachines in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CustomMachine, err error)
	// CustomMachines returns an object that can list and get CustomMachines.
	CustomMachines(namespace string) CustomMachineNamespaceLister
	CustomMachineListerExpansion
}

// customMachineLister implements the CustomMachineLister interface.
type customMachineLister struct {
	indexer cache.Indexer
}

// NewCustomMachineLister returns a new CustomMachineLister.
func NewCustomMachineLister(indexer cache.Indexer) CustomMachineLister {
	return &customMachineLister{indexer: indexer}
}

// List lists all CustomMachines in the indexer.
func (s *customMachineLister) List(selector labels.Selector) (ret []*v1alpha1.CustomMachine, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CustomMachine))
	})
	return ret, err
}

// CustomMachines returns an object that can list and get CustomMachines.
func (s *customMachineLister) CustomMachines(namespace string) CustomMachineNamespaceLister {
	return customMachineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CustomMachineNamespaceLister helps list and get CustomMachines.
// All objects returned here must be treated as read-only.
type CustomMachineNamespaceLister interface {
	// List lists all CustomMachines in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CustomMachine, err error)
	// Get retrieves the CustomMachine from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CustomMachine, error)
	CustomMachineNamespaceListerExpansion
}

// customMachineNamespaceLister implements the CustomMachineNamespaceLister
// interface.
type customMachineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CustomMachines in the indexer for a given namespace.
func (s customMachineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CustomMachine, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CustomMachine))
	})
	return ret, err
}

// Get retrieves the CustomMachine from the indexer for a given namespace and name.
func (s customMachineNamespaceLister) Get(name string) (*v1alpha1.CustomMachine, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("custommachine"), name)
	}
	return obj.(*v1alpha1.CustomMachine), nil
}
